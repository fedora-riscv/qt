diff -up qt-x11-opensource-src-4.5.2/src/network/ssl/qsslsocket_openssl.cpp.ca_bundle qt-x11-opensource-src-4.5.2/src/network/ssl/qsslsocket_openssl.cpp
--- qt-x11-opensource-src-4.5.2/src/network/ssl/qsslsocket_openssl.cpp.ca_bundle	2009-09-08 12:30:33.197347131 -0500
+++ qt-x11-opensource-src-4.5.2/src/network/ssl/qsslsocket_openssl.cpp	2009-09-08 12:41:50.295324320 -0500
@@ -482,11 +482,11 @@ void QSslSocketPrivate::resetDefaultCiph
 
 QList<QSslCertificate> QSslSocketPrivate::systemCaCertificates()
 {
-#ifdef QQ_OS_UNIX
+#ifdef Q_OS_UNIX
     // Check known locations for the system's default bundle.  ### On Windows,
     // we should use CAPI to find the bundle, and not rely on default unix
     // locations.
-    const char *standardLocations[] = {"/etc/ssl/certs/",
+    const char *standardLocations[] = {"/etc/pki/tls/certs/",
 #if 0
                                        // KDE uses KConfig for its SSL store,
                                        // but it also stores the bundle at
@@ -495,13 +495,16 @@ QList<QSslCertificate> QSslSocketPrivate
 #endif
                                        0};
     const char **it = standardLocations;
+    QList<QSslCertificate> certs;
     QStringList nameFilter;
     nameFilter << QLatin1String("*.pem") << QLatin1String("*.crt");
     while (*it) {
-        if (QDirIterator(QLatin1String(*it), nameFilter).hasNext())
-            return certificatesFromPath(QLatin1String(*it));
+        QDirIterator certfilesIt(QLatin1String(*it), nameFilter);
+        while (certfilesIt.hasNext())
+            certs += QSslCertificate::fromPath(certfilesIt.next());
         ++it;
     }
+    return certs;
 #endif
 
     // Qt provides a default bundle when we cannot detect the system's default
